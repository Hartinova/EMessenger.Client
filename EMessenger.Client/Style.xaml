<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"

                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"

                    xmlns:local="clr-namespace:EMessenger.Client"

                   >



    <LinearGradientBrush x:Key="GradientBrash"  StartPoint="0.5,0" EndPoint="0.5,1">

        <GradientStop Color="WhiteSmoke" Offset="0.5"/>

        <GradientStop Color="#FFDDDDDD" Offset="1"/>

    </LinearGradientBrush>





    <Style x:Key="OkCancelButtonStyle" TargetType="{x:Type Button}">

        <Setter Property="Template">

            <Setter.Value>



                <ControlTemplate TargetType="{x:Type Button}">

                    <Border x:Name="Rect" Background="{StaticResource GradientBrash}" BorderThickness="1" BorderBrush="#FF707070" CornerRadius="4" >

                        <Grid >

                            <Grid.ColumnDefinitions>

                                <ColumnDefinition Width="Auto"/>

                                <ColumnDefinition Width="Auto" />

                            </Grid.ColumnDefinitions>

                            <TextBlock x:Name="TextBlock" Grid.Column="1" Margin="5"  HorizontalAlignment="Left" Text="{TemplateBinding Content}" VerticalAlignment="Center"/>

                            <Image x:Name="Image" Grid.Column="0"  Margin="5"  HorizontalAlignment="Right" 

                                       Source="{Binding Tag, RelativeSource={RelativeSource AncestorType={x:Type Button}}}" Opacity="1" ClipToBounds="False" SnapsToDevicePixels="False"/>



                        </Grid>



                    </Border>

                    <ControlTemplate.Triggers>

                        <Trigger Property="IsEnabled" Value="False">

                            <Setter TargetName="TextBlock" Property="Foreground" Value="#c0c0c0"/>

                        </Trigger>

                        <Trigger Property="IsMouseOver" Value="True" >

                            <Setter TargetName="Rect" Property="Background" >

                                <Setter.Value>

                                    <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">

                                        <GradientStop Color="#FFCCF1FB" Offset="0.5"/>

                                        <GradientStop Color="#FF92E0F7" Offset="1"/>

                                    </LinearGradientBrush>

                                </Setter.Value>

                            </Setter>

                            <!--   <Setter TargetName="Rect" Property="BorderBrush" Value="#FF92E0F7"/>-->

                        </Trigger>

                        <Trigger Property="IsPressed" Value="True">

                            <Setter TargetName="Rect"  Property="Background" Value="#FF9DE6FB"/>

                        </Trigger>

                    </ControlTemplate.Triggers>

                </ControlTemplate>

            </Setter.Value>

        </Setter>



    </Style>



    <Style x:Key="SimpleButtonStyle" TargetType="{x:Type Button}">

        <Setter Property="Template">

            <Setter.Value>



                <ControlTemplate TargetType="{x:Type Button}">

                    <Border x:Name="Rect" Background="Transparent"  BorderThickness="1" BorderBrush="Transparent" CornerRadius="4" >



                        <!--Transparent        #FFBBEAF7                   -->

                        <Grid >

                            <Grid.ColumnDefinitions>

                                <ColumnDefinition Width="Auto"/>

                                <ColumnDefinition Width="Auto" />

                            </Grid.ColumnDefinitions>

                            <TextBlock x:Name="TextBlock" Grid.Column="1" Margin="5,2,5,2"  HorizontalAlignment="Left" Text="{TemplateBinding Content}" VerticalAlignment="Center"/>

                            <Image x:Name="Image" Grid.Column="0" Margin="5,2,5,2"  HorizontalAlignment="Right" Source="{Binding Tag, RelativeSource={RelativeSource AncestorType={x:Type Button}}}"/>



                        </Grid>



                    </Border>

                    <ControlTemplate.Triggers>

                        <Trigger Property="IsEnabled" Value="False">

                            <Setter TargetName="TextBlock" Property="Foreground" Value="#c0c0c0"/>

                        </Trigger>

                        <Trigger Property="IsMouseOver" Value="True" >

                            <Setter TargetName="Rect" Property="Background" >

                                <Setter.Value>

                                    <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">

                                        <GradientStop Color="#FFCCF1FB" Offset="0.5"/>

                                        <GradientStop Color="#FF92E0F7" Offset="1"/>

                                    </LinearGradientBrush>

                                </Setter.Value>

                            </Setter>

                            <!-- <Setter TargetName="Rect" Property="BorderBrush" Value="#FF707070"/>-->

                        </Trigger>

                        <Trigger Property="IsPressed" Value="True">

                            <Setter TargetName="Rect"  Property="Background" Value="#FF9DE6FB"/>

                        </Trigger>

                    </ControlTemplate.Triggers>

                </ControlTemplate>

            </Setter.Value>

        </Setter>



    </Style>





    <Style x:Key="SimpleButtonStyleOpenImage" TargetType="{x:Type Button}">

        <Setter Property="Template">

            <Setter.Value>



                <ControlTemplate TargetType="{x:Type Button}">

                    <Border x:Name="Rect" Background="Transparent"  BorderThickness="1" BorderBrush="Transparent" CornerRadius="4" >



                        <!--Transparent        #FFBBEAF7                   -->

                        <Grid >

                            <Grid.ColumnDefinitions>

                                <ColumnDefinition Width="Auto"/>

                            </Grid.ColumnDefinitions>

                            <Image x:Name="Image" Grid.Column="0" Margin="5,2,5,2"  HorizontalAlignment="Center" Source="/e012e_saprttp;component/Images/16/zoom.png"/>

                        </Grid>



                    </Border>

                    <ControlTemplate.Triggers>

                        <Trigger Property="IsEnabled" Value="False">

                            <Setter TargetName="Image" Property="Source" Value="/e012e_saprttp;component/Images/16/zoom-disabled.png"/>

                        </Trigger>

                        <Trigger Property="IsMouseOver" Value="True" >

                            <Setter TargetName="Rect" Property="Background" >

                                <Setter.Value>

                                    <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">

                                        <GradientStop Color="#FFCCF1FB" Offset="0.5"/>

                                        <GradientStop Color="#FF92E0F7" Offset="1"/>

                                    </LinearGradientBrush>

                                </Setter.Value>

                            </Setter>

                            <!-- <Setter TargetName="Rect" Property="BorderBrush" Value="#FF707070"/>-->

                        </Trigger>

                        <Trigger Property="IsPressed" Value="True">

                            <Setter TargetName="Rect"  Property="Background" Value="#FF9DE6FB"/>

                        </Trigger>

                    </ControlTemplate.Triggers>

                </ControlTemplate>

            </Setter.Value>

        </Setter>



    </Style>

    <Style x:Key="SimpleButtonStyleSaveImage" TargetType="{x:Type Button}">

        <Setter Property="Template">

            <Setter.Value>



                <ControlTemplate TargetType="{x:Type Button}">

                    <Border x:Name="Rect" Background="Transparent"  BorderThickness="1" BorderBrush="Transparent" CornerRadius="4" >



                        <!--Transparent        #FFBBEAF7                   -->

                        <Grid >

                            <Grid.ColumnDefinitions>

                                <ColumnDefinition Width="Auto"/>

                            </Grid.ColumnDefinitions>

                            <Image x:Name="Image" Grid.Column="0" Margin="5,2,5,2"  HorizontalAlignment="Right" Source="/e012e_saprttp;component/Images/16/disk.png"/>

                        </Grid>



                    </Border>

                    <ControlTemplate.Triggers>

                        <Trigger Property="IsEnabled" Value="False">

                            <Setter TargetName="Image" Property="Source" Value="/e012e_saprttp;component/Images/16/disk-disabled.png"/>

                        </Trigger>

                        <Trigger Property="IsMouseOver" Value="True" >

                            <Setter TargetName="Rect" Property="Background" >

                                <Setter.Value>

                                    <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">

                                        <GradientStop Color="#FFCCF1FB" Offset="0.5"/>

                                        <GradientStop Color="#FF92E0F7" Offset="1"/>

                                    </LinearGradientBrush>

                                </Setter.Value>

                            </Setter>

                            <!-- <Setter TargetName="Rect" Property="BorderBrush" Value="#FF707070"/>-->

                        </Trigger>

                        <Trigger Property="IsPressed" Value="True">

                            <Setter TargetName="Rect"  Property="Background" Value="#FF9DE6FB"/>

                        </Trigger>

                    </ControlTemplate.Triggers>

                </ControlTemplate>

            </Setter.Value>

        </Setter>



    </Style>



    <Style x:Key="SimpleButtonStyleDeleteImage" TargetType="{x:Type Button}">

        <Setter Property="Template">

            <Setter.Value>



                <ControlTemplate TargetType="{x:Type Button}">

                    <Border x:Name="Rect" Background="Transparent"  BorderThickness="1" BorderBrush="Transparent" CornerRadius="4" >



                        <!--Transparent        #FFBBEAF7                   -->

                        <Grid >

                            <Grid.ColumnDefinitions>

                                <ColumnDefinition Width="Auto" />

                            </Grid.ColumnDefinitions>

                            <Image x:Name="Image" Grid.Column="0" Margin="5,2,5,2"  HorizontalAlignment="Right" Source="/e012e_saprttp;component/Images/16/choice-no.png"/>

                        </Grid>



                    </Border>

                    <ControlTemplate.Triggers>

                        <Trigger Property="IsEnabled" Value="False">

                            <Setter TargetName="Image" Property="Source" Value="/e012e_saprttp;component/Images/16/choice-no-disabled.png"/>

                        </Trigger>

                        <Trigger Property="IsMouseOver" Value="True" >

                            <Setter TargetName="Rect" Property="Background" >

                                <Setter.Value>

                                    <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">

                                        <GradientStop Color="#FFCCF1FB" Offset="0.5"/>

                                        <GradientStop Color="#FF92E0F7" Offset="1"/>

                                    </LinearGradientBrush>

                                </Setter.Value>

                            </Setter>

                            <!-- <Setter TargetName="Rect" Property="BorderBrush" Value="#FF707070"/>-->

                        </Trigger>

                        <Trigger Property="IsPressed" Value="True">

                            <Setter TargetName="Rect"  Property="Background" Value="#FF9DE6FB"/>

                        </Trigger>

                    </ControlTemplate.Triggers>

                </ControlTemplate>

            </Setter.Value>

        </Setter>



    </Style>

    <Style x:Key="SimpleButtonStyleSelectImage" TargetType="{x:Type Button}">

        <Setter Property="Template">

            <Setter.Value>



                <ControlTemplate TargetType="{x:Type Button}">

                    <Border x:Name="Rect" Background="Transparent"  BorderThickness="1" BorderBrush="Transparent" CornerRadius="4" >



                        <!--Transparent        #FFBBEAF7                   -->

                        <Grid >

                            <Grid.ColumnDefinitions>

                                <ColumnDefinition Width="Auto"/>

                            </Grid.ColumnDefinitions>

                            <Image x:Name="Image" Grid.Column="0" Margin="5,2,5,2"  HorizontalAlignment="Center" Source="/e012e_saprttp;component/Images/16/picture_add.png"/>

                        </Grid>



                    </Border>

                    <ControlTemplate.Triggers>



                        <Trigger Property="IsMouseOver" Value="True" >

                            <Setter TargetName="Rect" Property="Background" >

                                <Setter.Value>

                                    <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">

                                        <GradientStop Color="#FFCCF1FB" Offset="0.5"/>

                                        <GradientStop Color="#FF92E0F7" Offset="1"/>

                                    </LinearGradientBrush>

                                </Setter.Value>

                            </Setter>

                            <!-- <Setter TargetName="Rect" Property="BorderBrush" Value="#FF707070"/>-->

                        </Trigger>

                        <Trigger Property="IsPressed" Value="True">

                            <Setter TargetName="Rect"  Property="Background" Value="#FF9DE6FB"/>

                        </Trigger>

                    </ControlTemplate.Triggers>

                </ControlTemplate>

            </Setter.Value>

        </Setter>



    </Style>





    <Style x:Key="SimpleButtonStyle1" TargetType="{x:Type Button}">

        <Setter Property="Template">

            <Setter.Value>



                <ControlTemplate TargetType="{x:Type Button}">

                    <Border x:Name="Rect" Background="Transparent"  BorderThickness="1" BorderBrush="Transparent" CornerRadius="4" >



                        <!--Transparent        #FFBBEAF7                   -->

                        <Grid >

                            <Grid.ColumnDefinitions>

                                <ColumnDefinition Width="Auto"/>

                            </Grid.ColumnDefinitions>

                            <TextBlock x:Name="TextBlock" Grid.Column="0" Margin="5,2,5,2"  HorizontalAlignment="Left" Text="{TemplateBinding Content}" VerticalAlignment="Center"/>





                        </Grid>



                    </Border>

                    <ControlTemplate.Triggers>

                        <Trigger Property="IsEnabled" Value="False">

                            <Setter TargetName="TextBlock" Property="Foreground" Value="#c0c0c0"/>

                        </Trigger>

                        <Trigger Property="IsMouseOver" Value="True" >

                            <Setter TargetName="Rect" Property="Background" >

                                <Setter.Value>

                                    <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">

                                        <GradientStop Color="#FFCCF1FB" Offset="0.5"/>

                                        <GradientStop Color="#FF92E0F7" Offset="1"/>

                                    </LinearGradientBrush>

                                </Setter.Value>

                            </Setter>

                            <!-- <Setter TargetName="Rect" Property="BorderBrush" Value="#FF707070"/>-->

                        </Trigger>

                        <Trigger Property="IsPressed" Value="True">

                            <Setter TargetName="Rect"  Property="Background" Value="#FF9DE6FB"/>

                        </Trigger>

                    </ControlTemplate.Triggers>

                </ControlTemplate>

            </Setter.Value>

        </Setter>



    </Style>





    <Style x:Key="SimpleButtonStyleVerticalPanel" TargetType="{x:Type Button}">

        <Setter Property="Template">

            <Setter.Value>



                <ControlTemplate TargetType="{x:Type Button}">

                    <Border x:Name="Rect" Background="Transparent"  BorderThickness="1" BorderBrush="Transparent" CornerRadius="4" >



                        <!--Transparent        #FFBBEAF7                   -->

                        <Grid >

                            <Grid.ColumnDefinitions>

                                <ColumnDefinition Width="*"/>

                                <ColumnDefinition Width="30" />

                            </Grid.ColumnDefinitions>

                            <TextBlock x:Name="TextBlock" Grid.Column="0" Margin="5,2,5,2"  HorizontalAlignment="Left" Text="{TemplateBinding Content}" VerticalAlignment="Center"/>

                            <Image x:Name="Image" Grid.Column="1" Margin="5,2,5,2"  HorizontalAlignment="Right" Source="{Binding Tag, RelativeSource={RelativeSource AncestorType={x:Type Button}}}"/>



                        </Grid>



                    </Border>

                    <ControlTemplate.Triggers>

                        <Trigger Property="IsEnabled" Value="False">

                            <Setter TargetName="TextBlock" Property="Foreground" Value="#c0c0c0"/>

                        </Trigger>

                        <Trigger Property="IsMouseOver" Value="True" >

                            <Setter TargetName="Rect" Property="Background" >

                                <Setter.Value>

                                    <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">

                                        <GradientStop Color="#FFCCF1FB" Offset="0.5"/>

                                        <GradientStop Color="#FF92E0F7" Offset="1"/>

                                    </LinearGradientBrush>

                                </Setter.Value>

                            </Setter>

                            <!-- <Setter TargetName="Rect" Property="BorderBrush" Value="#FF707070"/>-->

                        </Trigger>

                        <Trigger Property="IsPressed" Value="True">

                            <Setter TargetName="Rect"  Property="Background" Value="#FF9DE6FB"/>

                        </Trigger>

                    </ControlTemplate.Triggers>

                </ControlTemplate>

            </Setter.Value>

        </Setter>



    </Style>



    <LinearGradientBrush x:Key="ToolBarHorizontalBackground" EndPoint="0,1" StartPoint="0,0">

        <GradientStop Color="#FFFFFF" Offset="0"/>

        <GradientStop Color="#FFFBFF" Offset="0.5"/>

        <GradientStop Color="#F7F7F7" Offset="1"/>

    </LinearGradientBrush>

    <LinearGradientBrush x:Key="ToolBarToggleButtonVerticalBackground" EndPoint="1,0" StartPoint="0,0">

        <GradientStop Color="#ECECEC" Offset="0"/>

        <GradientStop Color="#DDDDDD" Offset="0.5"/>

        <GradientStop Color="#A0A0A0" Offset="1"/>

    </LinearGradientBrush>

    <SolidColorBrush x:Key="ToolBarButtonHover" Color="#C2E0FF"/>

    <SolidColorBrush x:Key="ToolBarGripper" Color="#C6C3C6"/>

    <Style x:Key="ToolBarVerticalOverflowButtonStyle" TargetType="{x:Type ToggleButton}">

        <Setter Property="Background" Value="{StaticResource ToolBarToggleButtonVerticalBackground}"/>

        <Setter Property="MinHeight" Value="0"/>

        <Setter Property="MinWidth" Value="0"/>

        <Setter Property="Template">

            <Setter.Value>

                <ControlTemplate TargetType="{x:Type ToggleButton}">

                    <Border x:Name="Bd" SnapsToDevicePixels="true" CornerRadius="0,0,3,3" Background="{TemplateBinding Background}">

                        <Canvas Width="7" VerticalAlignment="Bottom" SnapsToDevicePixels="true" Margin="2,7,2,2" Height="6" HorizontalAlignment="Right">

                            <Path Data="M 1.5 1 L 1.5 6" Stroke="White"/>

                            <Path Data="M 0.5 0 L 0.5 5" Stroke="{TemplateBinding Foreground}"/>

                            <Path Data="M 3.5 0.5 L 7 3.5 L 4 6.5 Z" Fill="White"/>

                            <Path Data="M 3 -0.5 L 6 2.5 L 3 5.5 Z" Fill="{TemplateBinding Foreground}"/>

                        </Canvas>

                    </Border>

                    <ControlTemplate.Triggers>

                        <Trigger Property="IsMouseOver" Value="true">

                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource ToolBarButtonHover}"/>

                        </Trigger>

                        <Trigger Property="IsKeyboardFocused" Value="true">

                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource ToolBarButtonHover}"/>

                        </Trigger>

                        <Trigger Property="IsEnabled" Value="false">

                            <Setter Property="Foreground" Value="{StaticResource ToolBarGripper}"/>

                        </Trigger>

                    </ControlTemplate.Triggers>

                </ControlTemplate>

            </Setter.Value>

        </Setter>

        <Style.Triggers>

            <DataTrigger Binding="{Binding Source={x:Static SystemParameters.HighContrast}}" Value="true">

                <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>

            </DataTrigger>

        </Style.Triggers>

    </Style>

    <LinearGradientBrush x:Key="ToolBarVerticalBackground" EndPoint="1,0" StartPoint="0,0">

        <GradientStop Color="#FFFFFF" Offset="0"/>

        <GradientStop Color="#FFFBFF" Offset="0.5"/>

        <GradientStop Color="#F7F7F7" Offset="1"/>

    </LinearGradientBrush>

    <LinearGradientBrush x:Key="ToolBarToggleButtonHorizontalBackground" EndPoint="0,1" StartPoint="0,0">

        <GradientStop Color="#ECECEC" Offset="0"/>

        <GradientStop Color="#DDDDDD" Offset="0.5"/>

        <GradientStop Color="#A0A0A0" Offset="1"/>

    </LinearGradientBrush>

    <Style x:Key="ToolBarHorizontalOverflowButtonStyle" TargetType="{x:Type ToggleButton}">

        <Setter Property="Background" Value="{StaticResource ToolBarToggleButtonHorizontalBackground}"/>

        <Setter Property="MinHeight" Value="0"/>

        <Setter Property="MinWidth" Value="0"/>

        <Setter Property="Template">

            <Setter.Value>

                <ControlTemplate TargetType="{x:Type ToggleButton}">

                    <Border x:Name="Bd" SnapsToDevicePixels="true" CornerRadius="0,3,3,0" Background="{TemplateBinding Background}">

                        <Canvas Width="6" VerticalAlignment="Bottom" SnapsToDevicePixels="true" Margin="7,2,2,2" Height="7" HorizontalAlignment="Right">

                            <Path Data="M 1 1.5 L 6 1.5" Stroke="White"/>

                            <Path Data="M 0 0.5 L 5 0.5" Stroke="{TemplateBinding Foreground}"/>

                            <Path Data="M 0.5 4 L 6.5 4 L 3.5 7 Z" Fill="White"/>

                            <Path Data="M -0.5 3 L 5.5 3 L 2.5 6 Z" Fill="{TemplateBinding Foreground}"/>

                        </Canvas>

                    </Border>

                    <ControlTemplate.Triggers>

                        <Trigger Property="IsMouseOver" Value="true">

                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource ToolBarButtonHover}"/>

                        </Trigger>

                        <Trigger Property="IsKeyboardFocused" Value="true">

                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource ToolBarButtonHover}"/>

                        </Trigger>

                        <Trigger Property="IsEnabled" Value="false">

                            <Setter Property="Foreground" Value="{StaticResource ToolBarGripper}"/>

                        </Trigger>

                    </ControlTemplate.Triggers>

                </ControlTemplate>

            </Setter.Value>

        </Setter>

        <Style.Triggers>

            <DataTrigger Binding="{Binding Source={x:Static SystemParameters.HighContrast}}" Value="true">

                <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>

            </DataTrigger>

        </Style.Triggers>

    </Style>

    <SolidColorBrush x:Key="ToolBarMenuBorder" Color="#808080"/>

    <SolidColorBrush x:Key="ToolBarSubMenuBackground" Color="#FDFDFD"/>

    <Style x:Key="ToolBarThumbStyle" TargetType="{x:Type Thumb}">

        <Setter Property="Template">

            <Setter.Value>

                <ControlTemplate TargetType="{x:Type Thumb}">

                    <Border SnapsToDevicePixels="True" Padding="{TemplateBinding Padding}" Background="Transparent">

                        <Rectangle>

                            <Rectangle.Fill>

                                <DrawingBrush ViewboxUnits="Absolute" ViewportUnits="Absolute" Viewport="0,0,4,4" Viewbox="0,0,4,4" TileMode="Tile">

                                    <DrawingBrush.Drawing>

                                        <DrawingGroup>

                                            <GeometryDrawing Brush="White" Geometry="M 1 1 L 1 3 L 3 3 L 3 1 z"/>

                                            <GeometryDrawing Brush="{StaticResource ToolBarGripper}" Geometry="M 0 0 L 0 2 L 2 2 L 2 0 z"/>

                                        </DrawingGroup>

                                    </DrawingBrush.Drawing>

                                </DrawingBrush>

                            </Rectangle.Fill>

                        </Rectangle>

                    </Border>

                    <ControlTemplate.Triggers>

                        <Trigger Property="IsMouseOver" Value="true">

                            <Setter Property="Cursor" Value="SizeAll"/>

                        </Trigger>

                    </ControlTemplate.Triggers>

                </ControlTemplate>

            </Setter.Value>

        </Setter>

    </Style>

    <Style x:Key="ToolBarMainPanelBorderStyle" TargetType="{x:Type Border}">

        <Setter Property="Margin" Value="0"/>

        <Setter Property="CornerRadius" Value="3,3,3,3"/>

        <Style.Triggers>

            <DataTrigger Binding="{Binding Source={x:Static SystemParameters.HighContrast}}" Value="true">

                <Setter Property="CornerRadius" Value="0,0,0,0"/>

            </DataTrigger>

        </Style.Triggers>

    </Style>

    <Style x:Key="ToolBarStyle1" TargetType="{x:Type ToolBar}">

        <Setter Property="Background" Value="{StaticResource ToolBarHorizontalBackground}"/>

        <Setter Property="Template">

            <Setter.Value>

                <ControlTemplate TargetType="{x:Type ToolBar}">

                    <Grid x:Name="Grid" Margin="3,1,1,1" SnapsToDevicePixels="true">

                        <Grid x:Name="OverflowGrid" HorizontalAlignment="Right" Visibility="Collapsed">

                            <ToggleButton x:Name="OverflowButton" ClickMode="Press" FocusVisualStyle="{x:Null}" IsChecked="{Binding IsOverflowOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" IsEnabled="{TemplateBinding HasOverflowItems}" Style="{StaticResource ToolBarHorizontalOverflowButtonStyle}"/>

                           

                        </Grid>

                        <Border x:Name="MainPanelBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" Style="{StaticResource ToolBarMainPanelBorderStyle}">

                            <DockPanel KeyboardNavigation.TabIndex="1" KeyboardNavigation.TabNavigation="Local">

                                <Thumb x:Name="ToolBarThumb" Margin="-3,-1,0,0" Padding="6,5,1,6" Style="{StaticResource ToolBarThumbStyle}" Width="10"/>

                                <ContentPresenter x:Name="ToolBarHeader" ContentSource="Header" HorizontalAlignment="Center" Margin="4,0,4,0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>

                                <ToolBarPanel x:Name="PART_ToolBarPanel" IsItemsHost="true" Margin="0,1,2,2" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>

                            </DockPanel>

                        </Border>

                    </Grid>

                    <ControlTemplate.Triggers>

                        <Trigger Property="IsOverflowOpen" Value="true">

                            <Setter Property="IsEnabled" TargetName="ToolBarThumb" Value="false"/>

                        </Trigger>

                        <Trigger Property="Header" Value="{x:Null}">

                            <Setter Property="Visibility" TargetName="ToolBarHeader" Value="Collapsed"/>

                        </Trigger>

                        <Trigger Property="ToolBarTray.IsLocked" Value="true">

                            <Setter Property="Visibility" TargetName="ToolBarThumb" Value="Collapsed"/>

                        </Trigger>

                      

                        <Trigger Property="Orientation" Value="Vertical">

                            <Setter Property="Margin" TargetName="Grid" Value="1,3,1,1"/>

                            <Setter Property="Style" TargetName="OverflowButton" Value="{StaticResource ToolBarVerticalOverflowButtonStyle}"/>

                            <Setter Property="Height" TargetName="ToolBarThumb" Value="10"/>

                            <Setter Property="Width" TargetName="ToolBarThumb" Value="Auto"/>

                            <Setter Property="Margin" TargetName="ToolBarThumb" Value="-1,-3,0,0"/>

                            <Setter Property="Padding" TargetName="ToolBarThumb" Value="5,6,6,1"/>

                            <Setter Property="Margin" TargetName="ToolBarHeader" Value="0,0,0,4"/>

                            <Setter Property="Margin" TargetName="PART_ToolBarPanel" Value="1,0,2,2"/>

                            <Setter Property="DockPanel.Dock" TargetName="ToolBarThumb" Value="Top"/>

                            <Setter Property="DockPanel.Dock" TargetName="ToolBarHeader" Value="Top"/>

                            <Setter Property="HorizontalAlignment" TargetName="OverflowGrid" Value="Stretch"/>

                            <Setter Property="VerticalAlignment" TargetName="OverflowGrid" Value="Bottom"/>

                            <Setter Property="Margin" TargetName="MainPanelBorder" Value="0,0,0,11"/>

                            <Setter Property="Background" Value="{StaticResource ToolBarVerticalBackground}"/>

                        </Trigger>

                        <Trigger Property="IsEnabled" Value="false">

                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>

                        </Trigger>

                    </ControlTemplate.Triggers>

                </ControlTemplate>

            </Setter.Value>

        </Setter>

        <Style.Triggers>

            <DataTrigger Binding="{Binding Source={x:Static SystemParameters.HighContrast}}" Value="true">

                <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>

            </DataTrigger>

        </Style.Triggers>

    </Style>





    <Style x:Key="TitleText" TargetType="TextBlock">

        <Setter Property="FontFamily" Value="Segoe UI"/>

        <Setter Property="FontSize" Value="12"/>

        <Setter Property="Foreground" Value="#FF000000"/>

    </Style>



    <SolidColorBrush x:Key="HyperLinkForegroudThemeBrush" Color="AliceBlue"/>

    <SolidColorBrush x:Key="HyperLinkPressedForegroudThemeBrush" Color="Red"/>



    <Style TargetType="DataGrid">

        <!-- Make the border and grid lines a little less imposing -->

        <Setter Property="BorderBrush" Value="#DDDDDD" />

        <Setter Property="HorizontalGridLinesBrush" Value="#DDDDDD" />

        <Setter Property="VerticalGridLinesBrush" Value="#DDDDDD" />



        <Setter Property="RowStyle">

            <Setter.Value>

                <Style TargetType="DataGridRow">

                    <Style.Triggers>

                        <!-- Highlight a grid row as the mouse passes over -->

                        <Trigger Property="IsMouseOver" Value="True">

                            <Setter Property="Background" Value="LightCyan" />

                        </Trigger>

                    </Style.Triggers>

                </Style>

            </Setter.Value>

        </Setter>

        <Setter Property="CellStyle">

            <Setter.Value>

                <Style TargetType="DataGridCell">

                    <Style.Triggers>

                        <!-- Highlight selected rows -->

                        <Trigger Property="IsSelected" Value="True">

                            <Setter Property="Background" Value="#ff66ccff" />

                            <Setter Property="BorderBrush" Value="Transparent" />

                            <Setter Property="Foreground" Value="Black" />

                        </Trigger>

                        <Trigger Property="IsFocused" Value="True">

                            <Setter Property="Background" Value="#ff66ccff" />

                            <Setter Property="BorderBrush" Value="Black" />

                            <Setter Property="BorderThickness" Value="1"/>

                            <Setter Property="Foreground" Value="Black" />

                        </Trigger>

                    </Style.Triggers>

                    <!-- Add some padding around the contents of a cell -->

                    <Setter Property="Padding" Value="4,3,4,3" />

                    <Setter Property="BorderBrush" Value="Transparent"/>

                    <Setter Property="BorderThickness" Value="1"/>

                    <Setter Property="Template">

                        <Setter.Value>

                            <ControlTemplate TargetType="DataGridCell">

                                <Border Padding="{TemplateBinding Padding}"

                                            BorderBrush="{TemplateBinding BorderBrush}"

                                            BorderThickness="{TemplateBinding BorderThickness}"

                                            Background="{TemplateBinding Background}">

                                    <ContentPresenter />

                                </Border>

                            </ControlTemplate>

                        </Setter.Value>

                    </Setter>

                    <Setter Property="FocusVisualStyle">

                        <Setter.Value>

                            <Style TargetType="Control">

                                <Setter Property="BorderBrush" Value="Transparent" />

                            </Style>

                        </Setter.Value>

                    </Setter>

                </Style>

            </Setter.Value>

        </Setter>

    </Style>





    <!--Control colors.-->

    <Color x:Key="WindowColor">#FFE8EDF9</Color>

    <Color x:Key="ContentAreaColorLight">#FFC5CBF9</Color>

    <Color x:Key="ContentAreaColorDark">#FF7381F9</Color>



    <Color x:Key="DisabledControlLightColor">#FFE8EDF9</Color>

    <Color x:Key="DisabledControlDarkColor">#FFC5CBF9</Color>

    <Color x:Key="DisabledForegroundColor">#FF888888</Color>



    <Color x:Key="SelectedBackgroundColor">#ff66ccff</Color>

    <Color x:Key="SelectedUnfocusedColor">#FFDDDDDD</Color>



    <Color x:Key="ControlLightColor">White</Color>

    <Color x:Key="ControlMediumColor">#FF7381F9</Color>

    <Color x:Key="ControlDarkColor">#FF211AA9</Color>



    <Color x:Key="ControlMouseOverColor">#FF3843C4</Color>

    <Color x:Key="ControlPressedColor">#FF211AA9</Color>





    <Color x:Key="GlyphColor">#FF444444</Color>

    <Color x:Key="GlyphMouseOver">sc#1, 0.004391443, 0.002428215, 0.242281124</Color>



    <!--Border colors-->

    <Color x:Key="BorderLightColor">#FFCCCCCC</Color>

    <Color x:Key="BorderMediumColor">#FF888888</Color>

    <Color x:Key="BorderDarkColor">#FF444444</Color>



    <Color x:Key="PressedBorderLightColor">#FF888888</Color>

    <Color x:Key="PressedBorderDarkColor">#FF444444</Color>



    <Color x:Key="DisabledBorderLightColor">#FFAAAAAA</Color>

    <Color x:Key="DisabledBorderDarkColor">#FF888888</Color>



    <Color x:Key="DefaultBorderBrushDarkColor">Black</Color>



    <!--Control-specific resources.-->

    <Color x:Key="HeaderTopColor">#FFC5CBF9</Color>

    <Color x:Key="DatagridCurrentCellBorderColor">Black</Color>

    <Color x:Key="SliderTrackDarkColor">#FFC5CBF9</Color>



    <Color x:Key="NavButtonFrameColor">#FF3843C4</Color>



    <LinearGradientBrush x:Key="MenuPopupBrush"

                     EndPoint="0.5,1"

                     StartPoint="0.5,0">

        <GradientStop Color="{DynamicResource ControlLightColor}"

                Offset="0" />

        <GradientStop Color="{DynamicResource ControlMediumColor}"

                Offset="0.5" />

        <GradientStop Color="{DynamicResource ControlLightColor}"

                Offset="1" />

    </LinearGradientBrush>



    <LinearGradientBrush x:Key="ProgressBarIndicatorAnimatedFill"

                     StartPoint="0,0"

                     EndPoint="1,0">

        <LinearGradientBrush.GradientStops>

            <GradientStopCollection>

                <GradientStop Color="#000000FF"

                    Offset="0" />

                <GradientStop Color="#600000FF"

                    Offset="0.4" />

                <GradientStop Color="#600000FF"

                    Offset="0.6" />

                <GradientStop Color="#000000FF"

                    Offset="1" />

            </GradientStopCollection>

        </LinearGradientBrush.GradientStops>

    </LinearGradientBrush>

    <Style x:Key="{x:Type TreeView}"

       TargetType="TreeView">

        <Setter Property="OverridesDefaultStyle"

          Value="True" />

        <Setter Property="SnapsToDevicePixels"

          Value="True" />

        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility"

          Value="Auto" />

        <Setter Property="ScrollViewer.VerticalScrollBarVisibility"

          Value="Auto" />

        <Setter Property="Template">

            <Setter.Value>

                <ControlTemplate TargetType="TreeView">

                    <Border Name="Border"

                CornerRadius="1"

                BorderThickness="1">

                        <Border.BorderBrush>

                            <SolidColorBrush Color="{DynamicResource BorderMediumColor}" />

                        </Border.BorderBrush>

                        <Border.Background>

                            <SolidColorBrush Color="{DynamicResource ControlLightColor}" />

                        </Border.Background>

                        <ScrollViewer Focusable="False"

                        CanContentScroll="False"

                        Padding="4">

                            <ItemsPresenter />

                        </ScrollViewer>

                    </Border>

                </ControlTemplate>

            </Setter.Value>

        </Setter>

    </Style>



    <Style x:Key="ExpandCollapseToggleStyle"

       TargetType="ToggleButton">

        <Setter Property="Focusable"

          Value="False" />

        <Setter Property="Template">

            <Setter.Value>

                <ControlTemplate TargetType="ToggleButton">

                    <Grid Width="15"

              Height="13"

              Background="Transparent">

                        <VisualStateManager.VisualStateGroups>

                            <VisualStateGroup x:Name="CheckStates">

                                <VisualState x:Name="Checked">

                                    <Storyboard>

                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)"

                                                 Storyboard.TargetName="Collapsed">

                                            <DiscreteObjectKeyFrame KeyTime="0"

                                            Value="{x:Static Visibility.Hidden}" />

                                        </ObjectAnimationUsingKeyFrames>

                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)"

                                                 Storyboard.TargetName="Expanded">

                                            <DiscreteObjectKeyFrame KeyTime="0"

                                            Value="{x:Static Visibility.Visible}" />

                                        </ObjectAnimationUsingKeyFrames>

                                    </Storyboard>

                                </VisualState>

                                <VisualState x:Name="Unchecked" />

                                <VisualState x:Name="Indeterminate" />

                            </VisualStateGroup>

                        </VisualStateManager.VisualStateGroups>

                        <Path x:Name="Collapsed"

                HorizontalAlignment="Left"

                VerticalAlignment="Center"

                Margin="1,1,1,1"

                Data="M 4 0 L 8 4 L 4 8 Z">

                            <Path.Fill>

                                <SolidColorBrush Color="{DynamicResource GlyphColor}" />

                            </Path.Fill>

                        </Path>

                        <Path x:Name="Expanded"

                HorizontalAlignment="Left"

                VerticalAlignment="Center"

                Margin="1,1,1,1"

                Data="M 0 4 L 8 4 L 4 8 Z"

                Visibility="Hidden">

                            <Path.Fill>

                                <SolidColorBrush Color="{DynamicResource GlyphColor}" />

                            </Path.Fill>

                        </Path>

                    </Grid>

                </ControlTemplate>

            </Setter.Value>

        </Setter>

    </Style>

    <Style x:Key="TreeViewItemFocusVisual">

        <Setter Property="Control.Template">

            <Setter.Value>

                <ControlTemplate>

                    <Border>

                        <Rectangle Margin="0,0,0,0"

                     StrokeThickness="5"

                               

                     Stroke="Black"

                     StrokeDashArray="1 2"

                     Opacity="0" />

                    </Border>

                </ControlTemplate>

            </Setter.Value>

        </Setter>

    </Style>

    <Style x:Key="{x:Type TreeViewItem}"

       TargetType="{x:Type TreeViewItem}">

        <Setter Property="Background"

          Value="Transparent" />

        <Setter Property="HorizontalContentAlignment"

          Value="{Binding Path=HorizontalContentAlignment,

    RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />

        <Setter Property="VerticalContentAlignment"

          Value="{Binding Path=VerticalContentAlignment,

    RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />

        <Setter Property="Padding"

          Value="1,0,0,0" />

        <Setter Property="Foreground"

          Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />

        <Setter Property="FocusVisualStyle"

          Value="{StaticResource TreeViewItemFocusVisual}" />

        <Setter Property="Template">

            <Setter.Value>

                <ControlTemplate TargetType="{x:Type TreeViewItem}">

                    <Grid>

                        <Grid.ColumnDefinitions>

                            <ColumnDefinition MinWidth="19"

                              Width="Auto" />

                            <ColumnDefinition Width="Auto" />

                            <ColumnDefinition Width="*" />

                        </Grid.ColumnDefinitions>

                        <Grid.RowDefinitions>

                            <RowDefinition Height="Auto" />

                            <RowDefinition />

                        </Grid.RowDefinitions>

                        <VisualStateManager.VisualStateGroups>

                            <VisualStateGroup x:Name="SelectionStates">

                                <VisualState x:Name="Selected">

                                    <Storyboard>

                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Bd"

                                                Storyboard.TargetProperty="(Panel.Background).

                    (SolidColorBrush.Color)"

                                                >

                                            <EasingColorKeyFrame KeyTime="0"

                                         Value="{StaticResource SelectedBackgroundColor}" />

                                        </ColorAnimationUsingKeyFrames>

                                    </Storyboard>

                                </VisualState>

                                <VisualState x:Name="Unselected" />

                                <VisualState x:Name="SelectedInactive">

                                    <Storyboard>

                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="Bd"

                                                Storyboard.TargetProperty="(Panel.Background).

                    (SolidColorBrush.Color)">

                                            <EasingColorKeyFrame KeyTime="0"

                                         Value="{StaticResource SelectedUnfocusedColor}" />

                                        </ColorAnimationUsingKeyFrames>

                                    </Storyboard>

                                </VisualState>

                            </VisualStateGroup>

                            <VisualStateGroup x:Name="ExpansionStates">

                                <VisualState x:Name="Expanded">

                                    <Storyboard>

                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)"

                                                 Storyboard.TargetName="ItemsHost">

                                            <DiscreteObjectKeyFrame KeyTime="0"

                                            Value="{x:Static Visibility.Visible}" />

                                        </ObjectAnimationUsingKeyFrames>

                                    </Storyboard>

                                </VisualState>

                                <VisualState x:Name="Collapsed" />

                            </VisualStateGroup>

                        </VisualStateManager.VisualStateGroups>

                        <ToggleButton x:Name="Expander"

                        Style="{StaticResource ExpandCollapseToggleStyle}"

                        ClickMode="Press"

                        IsChecked="{Binding IsExpanded,

            RelativeSource={RelativeSource TemplatedParent}}"/>

                        <Border x:Name="Bd"

                  Grid.Column="1"

                  Background="{TemplateBinding Background}"

                  BorderBrush="{TemplateBinding BorderBrush}"

                  BorderThickness="{TemplateBinding BorderThickness}"

                  Padding="{TemplateBinding Padding}">

                            <ContentPresenter x:Name="PART_Header"

                              ContentSource="Header"

                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>

                        </Border>

                        <ItemsPresenter x:Name="ItemsHost"

                          Grid.Row="1"

                          Grid.Column="1"

                          Grid.ColumnSpan="2"

                          Visibility="Collapsed" />

                    </Grid>

                    <ControlTemplate.Triggers>

                        <Trigger Property="HasItems"

                   Value="false">

                            <Setter TargetName="Expander"

                    Property="Visibility"

                    Value="Hidden" />

                        </Trigger>

                        <MultiTrigger>

                            <MultiTrigger.Conditions>

                                <Condition Property="HasHeader"

                         Value="false" />

                                <Condition Property="Width"

                         Value="Auto" />

                            </MultiTrigger.Conditions>

                            <Setter TargetName="PART_Header"

                    Property="MinWidth"

                    Value="75" />

                        </MultiTrigger>

                        <MultiTrigger>

                            <MultiTrigger.Conditions>

                                <Condition Property="HasHeader"

                         Value="false" />

                                <Condition Property="Height"

                         Value="Auto" />

                            </MultiTrigger.Conditions>

                            <Setter TargetName="PART_Header"

                    Property="MinHeight"

                    Value="19" />

                        </MultiTrigger>

                    </ControlTemplate.Triggers>

                </ControlTemplate>

            </Setter.Value>

        </Setter>

    </Style>

</ResourceDictionary>